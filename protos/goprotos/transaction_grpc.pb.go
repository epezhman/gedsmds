// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MDSServiceClient is the client API for MDSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MDSServiceClient interface {
	StopAndGetProfilingResult(ctx context.Context, in *Profiling, opts ...grpc.CallOption) (MDSService_StopAndGetProfilingResultClient, error)
	SubscribeBucket(ctx context.Context, in *BucketEventSubscription, opts ...grpc.CallOption) (*Empty, error)
}

type mDSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMDSServiceClient(cc grpc.ClientConnInterface) MDSServiceClient {
	return &mDSServiceClient{cc}
}

func (c *mDSServiceClient) StopAndGetProfilingResult(ctx context.Context, in *Profiling, opts ...grpc.CallOption) (MDSService_StopAndGetProfilingResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &MDSService_ServiceDesc.Streams[0], "/protos.MDSService/StopAndGetProfilingResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &mDSServiceStopAndGetProfilingResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MDSService_StopAndGetProfilingResultClient interface {
	Recv() (*ProfilingResult, error)
	grpc.ClientStream
}

type mDSServiceStopAndGetProfilingResultClient struct {
	grpc.ClientStream
}

func (x *mDSServiceStopAndGetProfilingResultClient) Recv() (*ProfilingResult, error) {
	m := new(ProfilingResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mDSServiceClient) SubscribeBucket(ctx context.Context, in *BucketEventSubscription, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.MDSService/SubscribeBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MDSServiceServer is the server API for MDSService service.
// All implementations should embed UnimplementedMDSServiceServer
// for forward compatibility
type MDSServiceServer interface {
	StopAndGetProfilingResult(*Profiling, MDSService_StopAndGetProfilingResultServer) error
	SubscribeBucket(context.Context, *BucketEventSubscription) (*Empty, error)
}

// UnimplementedMDSServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMDSServiceServer struct {
}

func (UnimplementedMDSServiceServer) StopAndGetProfilingResult(*Profiling, MDSService_StopAndGetProfilingResultServer) error {
	return status.Errorf(codes.Unimplemented, "method StopAndGetProfilingResult not implemented")
}
func (UnimplementedMDSServiceServer) SubscribeBucket(context.Context, *BucketEventSubscription) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeBucket not implemented")
}

// UnsafeMDSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MDSServiceServer will
// result in compilation errors.
type UnsafeMDSServiceServer interface {
	mustEmbedUnimplementedMDSServiceServer()
}

func RegisterMDSServiceServer(s grpc.ServiceRegistrar, srv MDSServiceServer) {
	s.RegisterService(&MDSService_ServiceDesc, srv)
}

func _MDSService_StopAndGetProfilingResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Profiling)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MDSServiceServer).StopAndGetProfilingResult(m, &mDSServiceStopAndGetProfilingResultServer{stream})
}

type MDSService_StopAndGetProfilingResultServer interface {
	Send(*ProfilingResult) error
	grpc.ServerStream
}

type mDSServiceStopAndGetProfilingResultServer struct {
	grpc.ServerStream
}

func (x *mDSServiceStopAndGetProfilingResultServer) Send(m *ProfilingResult) error {
	return x.ServerStream.SendMsg(m)
}

func _MDSService_SubscribeBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketEventSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MDSServiceServer).SubscribeBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MDSService/SubscribeBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MDSServiceServer).SubscribeBucket(ctx, req.(*BucketEventSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

// MDSService_ServiceDesc is the grpc.ServiceDesc for MDSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MDSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.MDSService",
	HandlerType: (*MDSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubscribeBucket",
			Handler:    _MDSService_SubscribeBucket_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StopAndGetProfilingResult",
			Handler:       _MDSService_StopAndGetProfilingResult_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transaction.proto",
}
